buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.29', changing: true
    }
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'java-library'
}

apply plugin: 'net.minecraftforge.gradle'

// Version and group are inherited from root project
// version = project.findProperty('mod_version') ?: '1.1-SNAPSHOT'
// group = project.findProperty('mod_group_id') ?: 'jp.moyashi.phoneos'
base {
    archivesName = project.findProperty('mod_id') ?: 'mochimobileos'
}

// Force Java 17 compilation for ForgeGradle compatibility
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

configurations {
    library
    implementation.extendsFrom(library)
}

repositories {
    // The order of entries in repositories matters!
    // The repositories here will be used for your mod's dependencies.
    maven {
        name = 'MinecraftForge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = 'JOGAMP'
        url = 'https://jogamp.org/deployment/maven/'
    }
    maven {
        name = 'Maxhenkel Maven'
        url = 'https://maven.maxhenkel.de/repository/public/'
    }
    maven {
        name = 'MCEF Releases'
        url = 'https://mcef-download.cinemamod.com/repositories/releases'
    }
    mavenCentral()
}

configurations {
    runtimeLib
    jarJar
}

dependencies {
    // Minecraft Forge for 1.20.1
    minecraft 'net.minecraftforge:forge:1.20.1-47.4.0'

    // Core module dependency - embed in jar
    implementation project(':core')

    // Processing dependencies - explicitly declare for Forge environment
    // This ensures Processing classes are available at runtime
    implementation 'org.processing:core:4.4.4'

    // Also keep runtimeLib for JAR packaging
    runtimeLib files('libs/core-4.4.4.jar')

    implementation 'com.google.code.gson:gson:2.10.1'

    // MCEF (Minecraft Chromium Embedded Framework) for Chromium browser integration in Forge
    // Note: Core module uses jcefmaven (me.friwi:jcefmaven:135.0.20) for standalone environment
    // Forge uses MCEF to solve apache-commons-compress conflicts and JVM module access issues
    // MCEF provides org.cef.* APIs compatible with jcefmaven, but uses LWJGL instead of JOGL
    // Version 2.1.4-1.20.1: Stable version compatible with Minecraft Forge 1.20.1-47.4.0
    // MCEFは外部MODとしてmodsフォルダに配置する必要がある（implementation指定だけでは不十分）
    compileOnly('com.cinemamod:mcef:2.1.4-1.20.1') {
        // Exclude Fabric Loader - we're using Forge, not Fabric
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    // JavaFX for HTML/WebView integration (platform-specific)
    // These are required for runClient environment
    def platform = System.getProperty('os.name').toLowerCase().contains('win') ? 'win' :
                   System.getProperty('os.name').toLowerCase().contains('mac') ? 'mac' : 'linux'
    implementation "org.openjfx:javafx-base:17.0.2:${platform}"
    implementation "org.openjfx:javafx-graphics:17.0.2:${platform}"
    implementation "org.openjfx:javafx-controls:17.0.2:${platform}"
    implementation "org.openjfx:javafx-web:17.0.2:${platform}"
    implementation "org.openjfx:javafx-swing:17.0.2:${platform}"
    implementation "org.openjfx:javafx-media:17.0.2:${platform}"

    // Simple Voice Chat API - for audio recording integration
    compileOnly 'de.maxhenkel.voicechat:voicechat-api:2.6.0'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Task to copy JavaFX JARs from Gradle cache to libs directory
task copyJavaFxJars(type: Copy) {
    def platform = System.getProperty('os.name').toLowerCase().contains('win') ? 'win' :
                   System.getProperty('os.name').toLowerCase().contains('mac') ? 'mac' : 'linux'

    from configurations.runtimeClasspath.filter { it.name.contains('javafx') }
    into 'libs/javafx'

    doLast {
        println "Copied JavaFX JARs to libs/javafx for ${platform} platform"
    }
}

// Task to extract Processing core classes into build output for development
task extractProcessingCore(type: Copy) {
    from zipTree('libs/core-4.4.4.jar')
    into 'build/classes/java/main'
    exclude 'META-INF/**'
    exclude '*.jnilib'
    exclude '*.dll'
    exclude '*.so'
    exclude '*.dylib'
}

// Task to extract JavaFX classes AND native libraries into build output for development
task extractJavaFxCore(type: Copy) {
    dependsOn copyJavaFxJars

    from fileTree('libs/javafx').matching {
        include '*.jar'
    }.collect { zipTree(it) }

    into 'build/classes/java/main'
    exclude 'META-INF/**'
    exclude 'module-info.class'
    // Keep native libraries (.dll, .so, .dylib) - JavaFX needs them!
}

// MCEF (Minecraft Chromium Embedded Framework) is now used instead of jcefmaven for Forge
// MCEF is automatically loaded from Maven repository - no manual library copying needed
// Previous JCEF tasks (copyJcefLibs, extractJcefCore) are no longer required

// Make compileJava depend on extractions
tasks.named('compileJava').configure {
    finalizedBy extractProcessingCore, extractJavaFxCore
}

// Make sure classes task also triggers extraction
tasks.named('classes').configure {
    dependsOn extractProcessingCore, extractJavaFxCore
}

// Minecraft run configuration
minecraft {
    mappings channel: 'official', version: '1.20.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            // MCEF (Minecraft Chromium Embedded Framework) is used for Chromium integration
            // MCEF uses LWJGL instead of JOGL, so no JVM module access flags are required
            // Previous JVM flags (--add-opens, --add-exports) are no longer needed

            mods {
                mochimobileos {
                    source sourceSets.main
                    source project(':core').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                mochimobileos {
                    source sourceSets.main
                    source project(':core').sourceSets.main
                }
            }
        }
    }
}

// Configure jar
jar {
    // Include core module classes AND resources in the jar
    // Note: org.cef.* packages are NOT excluded anymore
    // ChromiumProviderパターンにより、coreモジュールはcompileOnlyでjcefmavenを参照
    // Forge環境ではMCEFがorg.cef.* APIを提供し、ForgeChromiumProviderがCefAppを注入する
    from(project(':core').sourceSets.main.output) {
        // Include both classes and resources (fonts, etc.)
        include '**/*.class'
        include '**/*.ttf'
        include '**/*.otf'
        include '**/*.png'
        include '**/*.jpg'
        include '**/*.json'
    }

    // Include Processing library for runtime
    from {
        configurations.runtimeLib.collect { zipTree(it) }
    } {
        exclude 'META-INF/'
        exclude 'META-INF/**'
        exclude '**/*.txt'
        exclude '**/*.md'
    }

    manifest {
        attributes([
            'Specification-Title': 'MochiMobileOS Forge Integration',
            'Specification-Vendor': 'jp.moyashi',
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': "${version}",
            'Implementation-Vendor': 'jp.moyashi',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    finalizedBy 'reobfJar'
}

// Configure Java compilation
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 17
}

// Configure test task
test {
    useJUnitPlatform()
    systemProperty 'file.encoding', 'UTF-8'
}

// Configure publishing for Forge module
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = "MochiMobileOS Forge Integration"
                description = "MochiMobileOS Forge module - Minecraft Forge integration for virtual mobile OS"
                url = "https://github.com/MochidsukiC/MochiMobileOS"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                developers {
                    developer {
                        id = "MochidsukiC"
                        name = "MochidsukiC"
                        email = "contact@moyashi.jp"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/MochidsukiC/MochiMobileOS.git"
                    developerConnection = "scm:git:ssh://github.com/MochidsukiC/MochiMobileOS.git"
                    url = "https://github.com/MochidsukiC/MochiMobileOS"
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/MochidsukiC/MochiMobileOS")
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        // Optional: Local repository for testing
        maven {
            name = "Local"
            url = uri("$buildDir/repo")
        }
    }
}

// Add a task to display the current configuration
task showConfig {
    doLast {
        println '=== MochiMobileOS Forge Configuration ==='
        println "Project: ${project.name}"
        println "Version: ${version}"
        println "Group: ${group}"
        println "Archive Name: ${archivesBaseName}"
        println "Java Version: ${java.toolchain.languageVersion.get()}"
        println 'Minecraft Forge: 1.20.1-47.2.0'
        println 'Mappings: official 1.20.1'
        println '=========================================='
    }
}